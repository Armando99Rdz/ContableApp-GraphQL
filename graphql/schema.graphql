
#import Account.graphql
#import Transaction.graphql


"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Mutation

type Query {
    users: [User!]! @paginate(type: "paginator" model: "App\\User")
    user(id: ID @eq): User @find(model: "App\\User")
    me: User! @auth
}

type User {
    id: ID!
    name: String!
    email: String!
    accounts: [Account] @hasMany
    avatar: String
    created_at: DateTime!
    updated_at: DateTime!
}


# Los Mutations en graphql sirven para modificar algo en nuestro backend (update, create, etc.)
extend type Mutation {

    # Mutation para crear una cuenta. CreateAccountInput define los parametros que espera
    # @create para generar un nuevo modelo eloquent de laravel con los parametros dados.
    # @inject para inyectar el usuario que esta autenticado a mi API, y no pedir el user_id como tal.
    # @guard verifica que el usuario est√© autenticado."
    createAccount(input: CreateAccountInput! @spread): Account @create @inject(context: "user.id", name: "user_id") @guard(with: ["api"])
    updateAccount(id: ID!, input: UpdateAccountInput! @spread): Account @update @can(ability:"update", find: "id") @guard(with: ["api"])
    # TODO: delete account

    createTransaction(input: CreateTransactionInput! @spread): Transaction @create @guard(with: ["api"])
    updateTransaction(id: ID!, input: UpdateTransactionInput! @spread): Transaction @update @can(ability:"update", find: "id") @guard(with: ["api"])
    deleteTransaction(id: ID!): Transaction @delete @can(ability:"delete", find: "id") @guard(with: ["api"])

}